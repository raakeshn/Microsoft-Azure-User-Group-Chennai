cd\
clear

#Multi-site VPN Configuration with Hybrid NW Connection to On-Premises

#Logging into Azure account (ARM Mode) and selecting Microsoft Sponsored subscription to be the default deployment account
Login-AzureRmAccount
#Select-AzureRmProfile -Path <Drive\Path\azurermprofile.json>
Get-AzureRmSubscription
#Select-AzureRmProfile -Path <Drive\Path\azurermprofile.json>

#Record existing powershell ISE environment variables
$ExistingVariables = Get-Variable | Select-Object -ExpandProperty Name

#Gateway Creation
$NumberOfVNets = 1;

While ($NumberOfVNets -le 3)
{ 
    ##Resource Group
    $rgName = 'AzrSvc'
    
    ##Network
    $vnetName = 'AzrTrngVnet'
    $gwsubName = 'GatewaySubnet'
    $GWName = 'AzrGW'
    $GWIPName = 'AzrGWIP'
    $GWIPconfName = 'azrgwipconf'
    $P2SRootCertName = ‘P2SRootCert’
        
    If ($NumberOfVNets -eq 1)
    {
        ##Location Preference
        $locationName = Get-AzureRmLocation|Where-Object{$_.DisplayName -match 'West US 2'}|Sort-Object -Descending|Select-Object -ExpandProperty Displayname
                        
        ##Resource Group
        $rgName = Get-AzureRmResourceGroup|Where-Object{$_.ResourceGroupName -match "$rgName$NumberOfVNets"}|Select-Object -ExpandProperty ResourceGroupName
        
        ##Network and VPN Gateway Identifiers
        $vnetName = "$vnetName$NumberOfVNets"
        $gwsubPrefix = '10.0.254.0/24'
        
        $GWName = "$GWName$NumberOfVNets"
        $GWIPName = "$GWIPName$NumberOfVNets"
        $GWIPconfName = "$GWIPconfName$NumberOfVNets"
        
        ##VPN Client
        $P2SRootCertName = $P2SRootCertName + $NumberOfVNets + '.cer'
        $vpnClntAdrsPl = '192.168.1.0/24'
        $P2SRootCertPubKeyBase64 = 'Alphanumeric (Base-64 encoded X.509 .CER file) code generated by using the Certificate Export Wizard'
    }            
    
    ElseIf ($NumberOfVNets -eq 2)
    {
        ##Location Preference
        $locationName = Get-AzureRmLocation|Where-Object{$_.DisplayName -match 'East US 2'}|Sort-Object -Descending|Select-Object -ExpandProperty Displayname
                        
        ##Resource Group
        $rgName = Get-AzureRmResourceGroup|Where-Object{$_.ResourceGroupName -match "$rgName$NumberOfVNets"}|Select-Object -ExpandProperty ResourceGroupName
        
        ##Network and VPN Gateway Identifiers
        $vnetName = "$vnetName$NumberOfVNets"
        $gwsubPrefix = '172.16.254.0/24'
        
        $GWName = "$GWName$NumberOfVNets"
        $GWIPName = "$GWIPName$NumberOfVNets"
        $GWIPconfName = "$GWIPconfName$NumberOfVNets"
        
        ##VPN Client
        $P2SRootCertName = $P2SRootCertName + $NumberOfVNets + ".cer"
        $vpnClntAdrsPl = '192.168.2.0/24'
        $P2SRootCertPubKeyBase64 = 'Alphanumeric (Base-64 encoded X.509 .CER file) code generated by using the Certificate Export Wizard'
    }            
        
    ElseIf ($NumberOfVNets -eq 3)
    {
        ##Location Preference
        $locationName = Get-AzureRmLocation|Where-Object{$_.DisplayName -match 'UK West'}|Sort-Object -Descending|Select-Object -ExpandProperty Displayname
                        
        ##Resource Group
        $rgName = Get-AzureRmResourceGroup|Where-Object{$_.ResourceGroupName -match "$rgName$NumberOfVNets"}|Select-Object -ExpandProperty ResourceGroupName

        ##Network
        $vnetName = "$vnetName$NumberOfVNets"
        $gwsubPrefix = '172.17.254.0/24'

        $GWName = "$GWName$NumberOfVNets"
        $GWIPName = "$GWIPName$NumberOfVNets"
        $GWIPconfName = "$GWIPconfName$NumberOfVNets"

        ##VPN Client
        $P2SRootCertName = $P2SRootCertName + $NumberOfVNets + ".cer"
        $vpnClntAdrsPl = '192.168.3.0/24'
        $P2SRootCertPubKeyBase64 = 'Alphanumeric (Base-64 encoded X.509 .CER file) code generated by using the Certificate Export Wizard'
    }
    
    ##Gateway Setup
    $vnet=Get-AzureRmVirtualNetwork -Name $vnetName -ResourceGroupName $rgName
    Add-AzureRmVirtualNetworkSubnetConfig -Name $gwsubName -VirtualNetwork $vnet -AddressPrefix $gwsubPrefix
    $vnet=Set-AzureRmVirtualNetwork -VirtualNetwork $vnet
    
    $gwSub=Get-AzureRmVirtualNetworkSubnetConfig -Name $gwsubName -VirtualNetwork $vnet
    $gwpip=New-AzureRmPublicIpAddress -Name $GWIPName -ResourceGroupName $rgName -Location $locationName -AllocationMethod Dynamic
    $gwipconf=New-AzureRmVirtualNetworkGatewayIpConfig -Name $GWIPconfName -Subnet $gwSub -PublicIpAddress $gwpip
    $gwType = @("ExpressRoute", "Vpn")
    $vpnType = @("PolicyBased", "RouteBased")
    $gwSpec = @("Basic", "HighPerformance", "Standard")

    ##Gateway Creation with Client VPN Configuration
    New-AzureRmVirtualNetworkGateway -Name $GWName -ResourceGroupName $rgName -Location $locationName -IpConfigurations $gwipconf -GatewayType $gwType[1] -VpnType $vpnType[1] -GatewaySku $gwSpec[0] -VpnClientAddressPool $vpnClntAdrsPl
    Add-AzureRmVpnClientRootCertificate -VpnClientRootCertificateName $P2SRootCertName -PublicCertData $P2SRootCertPubKeyBase64 -VirtualNetworkGatewayName $GWName -ResourceGroupName $rgName

$NumberOfVNets++
}

$NumberOfGWs = 1;

While ($NumberOfGWs -le 3)
{
    ##Resource Group
    $rgName = 'AzrSvc'
    
    ##Network
    $vnetName = 'AzrTrngVnet'
    $GWName = 'AzrGW'
    $GWIPName = 'AzrGWIP'
    $GWIPconfName = 'azrgwipconf'
    $P2SRootCertName = ‘P2SRootCert’
    $cncType = @("ExpressRoute", "IPsec", "Vnet2Vnet", "VPNClient")
    $shrdKy = cat <Drive\Path\mysharedkey.txt>
    
        
    if ($NumberOfGWs -eq 1)
    {
        $locationName1 = Get-AzureRmLocation|Where-Object{$_.DisplayName -match 'West US 2'}|Sort-Object -Descending|Select-Object -ExpandProperty Displayname
        $rgName1 = Get-AzureRmResourceGroup|Where-Object{$_.ResourceGroupName -match "${rgName}1"}|Select-Object -ExpandProperty ResourceGroupName
        $vnetName1 = "${vnetName}1"
        $GWName1 = "${GWName}1"
        $GWIPName1 = "${GWIPName}1"
        $GWIPconfName1 = "${GWIPconfName}1"
        $vnet1 = Get-AzureRmVirtualNetwork -Name $vnetName1 -ResourceGroupName $rgName1
        $gwSub1 = Get-AzureRmVirtualNetworkSubnetConfig -Name $gwsubName -VirtualNetwork $vnet1
        $gwpip1 = Get-AzureRmPublicIpAddress -Name $GWIPName1 -ResourceGroupName $rgName1
        $GW1 = Get-AzureRmVirtualNetworkGateway -Name $GWName1 -ResourceGroupName $rgName1

        $locationName2 = Get-AzureRmLocation|Where-Object{$_.DisplayName -match 'East US 2'}|Sort-Object -Descending|Select-Object -ExpandProperty Displayname
        $rgName2 = Get-AzureRmResourceGroup|Where-Object{$_.ResourceGroupName -match "${rgName}2"}|Select-Object -ExpandProperty ResourceGroupName
        $vnetName2 = "${vnetName}2"
        $GWName2 = "${GWName}2"
        $GWIPName2 = "${GWIPName}2"
        $GWIPconfName2 = "${GWIPconfName}2"
        $vnet2 = Get-AzureRmVirtualNetwork -Name $vnetName2 -ResourceGroupName $rgName2
        $gwSub2 = Get-AzureRmVirtualNetworkSubnetConfig -Name $gwsubName -VirtualNetwork $vnet2
        $gwpip2 = Get-AzureRmPublicIpAddress -Name $GWIPName2 -ResourceGroupName $rgName2
        $GW2 = Get-AzureRmVirtualNetworkGateway -Name $GWName2 -ResourceGroupName $rgName2

        ##inter-VNet Gateway connection name
        $vnetConnection12 = 'VNet1toVNet2VPN'
        $vnetConnection21 = 'VNet2toVNet1VPN'

        ##inter-VNet Gateway IPsec Connection
        New-AzureRmVirtualNetworkGatewayConnection -Name $vnetConnection12 -ResourceGroupName $rgName1 -Location $locationName1 -VirtualNetworkGateway1 $GW1 -VirtualNetworkGateway2 $GW2 -ConnectionType $cncType[2] -SharedKey $shrdKy
        New-AzureRmVirtualNetworkGatewayConnection -Name $vnetConnection21 -ResourceGroupName $rgName2 -Location $locationName2 -VirtualNetworkGateway1 $GW2 -VirtualNetworkGateway2 $GW1 -ConnectionType $cncType[2] -SharedKey $shrdKy
    }

    ElseIf ($NumberOfGWs -eq 2)
    {
        $locationName2 = Get-AzureRmLocation|Where-Object{$_.DisplayName -match 'East US 2'}|Sort-Object -Descending|Select-Object -ExpandProperty Displayname
        $rgName2 = Get-AzureRmResourceGroup|Where-Object{$_.ResourceGroupName -match "${rgName}2"}|Select-Object -ExpandProperty ResourceGroupName
        $vnetName2 = "${vnetName}2"
        $GWName2 = "${GWName}2"
        $GWIPName2 = "${GWIPName}2"
        $GWIPconfName2 = "${GWIPconfName}2"
        $vnet2 = Get-AzureRmVirtualNetwork -Name $vnetName2 -ResourceGroupName $rgName2
        $gwSub2 = Get-AzureRmVirtualNetworkSubnetConfig -Name $gwsubName -VirtualNetwork $vnet2
        $gwpip2 = Get-AzureRmPublicIpAddress -Name $GWIPName2 -ResourceGroupName $rgName2
        $GW2 = Get-AzureRmVirtualNetworkGateway -Name $GWName2 -ResourceGroupName $rgName2

        $locationName3 = Get-AzureRmLocation|Where-Object{$_.DisplayName -match 'UK West'}|Sort-Object -Descending|Select-Object -ExpandProperty Displayname
        $rgName3 = Get-AzureRmResourceGroup|Where-Object{$_.ResourceGroupName -match "${rgName}3"}|Select-Object -ExpandProperty ResourceGroupName
        $vnetName3 = "${vnetName}3"
        $GWName3 = "${GWName}3"
        $GWIPName3 = "${GWIPName}3"
        $GWIPconfName = "${GWIPconfName}3"
        $vnet3 = Get-AzureRmVirtualNetwork -Name $vnetName3 -ResourceGroupName $rgName3
        $gwSub3 = Get-AzureRmVirtualNetworkSubnetConfig -Name $gwsubName -VirtualNetwork $vnet3
        $gwpip3 = Get-AzureRmPublicIpAddress -Name $GWIPName3 -ResourceGroupName $rgName3
        $GW3 = Get-AzureRmVirtualNetworkGateway -Name $GWName3 -ResourceGroupName $rgName3

        ##inter-VNet Gateway connection name
        $vnetConnection23 = 'VNet2toVNet3VPN'
        $vnetConnection32 = 'VNet3toVNet2VPN'

        ##inter-VNet Gateway IPsec Connection
        New-AzureRmVirtualNetworkGatewayConnection -Name $vnetConnection23 -ResourceGroupName $rgName2 -Location $locationName2 -VirtualNetworkGateway1 $GW2 -VirtualNetworkGateway2 $GW3 -ConnectionType $cncType[2] -SharedKey $shrdKy
        New-AzureRmVirtualNetworkGatewayConnection -Name $vnetConnection32 -ResourceGroupName $rgName3 -Location $locationName3 -VirtualNetworkGateway1 $GW3 -VirtualNetworkGateway2 $GW2 -ConnectionType $cncType[2] -SharedKey $shrdKy
    }

    ElseIf ($NumberOfGWs -eq 3)
    {
        $locationName1 = Get-AzureRmLocation|Where-Object{$_.DisplayName -match 'West US 2'}|Sort-Object -Descending|Select-Object -ExpandProperty Displayname
        $rgName1 = Get-AzureRmResourceGroup|Where-Object{$_.ResourceGroupName -match "${rgName}1"}|Select-Object -ExpandProperty ResourceGroupName
        $vnetName1 = "${vnetName}1"
        $GWName1 = "${GWName}1"
        $GWIPName1 = "${GWIPName}1"
        $GWIPconfName1 = "${GWIPconfName}1"
        $vnet1 = Get-AzureRmVirtualNetwork -Name $vnetName1 -ResourceGroupName $rgName1
        $gwSub1 = Get-AzureRmVirtualNetworkSubnetConfig -Name $gwsubName -VirtualNetwork $vnet1
        $gwpip1 = Get-AzureRmPublicIpAddress -Name $GWIPName1 -ResourceGroupName $rgName1
        $GW1 = Get-AzureRmVirtualNetworkGateway -Name $GWName1 -ResourceGroupName $rgName1

        $locationName3 = Get-AzureRmLocation|Where-Object{$_.DisplayName -match 'UK West'}|Sort-Object -Descending|Select-Object -ExpandProperty Displayname
        $rgName3 = Get-AzureRmResourceGroup|Where-Object{$_.ResourceGroupName -match "${rgName}3"}|Select-Object -ExpandProperty ResourceGroupName
        $vnetName3 = "${vnetName}3"
        $GWName3 = "${GWName}3"
        $GWIPName3 = "${GWIPName}3"
        $GWIPconfName = "${GWIPconfName}3"
        $vnet3 = Get-AzureRmVirtualNetwork -Name $vnetName3 -ResourceGroupName $rgName3
        $gwSub3 = Get-AzureRmVirtualNetworkSubnetConfig -Name $gwsubName -VirtualNetwork $vnet3
        $gwpip3 = Get-AzureRmPublicIpAddress -Name $GWIPName3 -ResourceGroupName $rgName3
        $GW3 = Get-AzureRmVirtualNetworkGateway -Name $GWName3 -ResourceGroupName $rgName3

        ##inter-VNet Gateway connection name
        $vnetConnection13 = 'VNet1toVNet3VPN'
        $vnetConnection31 = 'VNet3toVNet1VPN'

        ##inter-VNet Gateway IPsec Connection
        New-AzureRmVirtualNetworkGatewayConnection -Name $vnetConnection13 -ResourceGroupName $rgName1 -Location $locationName1 -VirtualNetworkGateway1 $GW1 -VirtualNetworkGateway2 $GW3 -ConnectionType $cncType[2] -SharedKey $shrdKy
        New-AzureRmVirtualNetworkGatewayConnection -Name $vnetConnection31 -ResourceGroupName $rgName3 -Location $locationName3 -VirtualNetworkGateway1 $GW3 -VirtualNetworkGateway2 $GW1 -ConnectionType $cncType[2] -SharedKey $shrdKy
    }
$NumberOfGWs++
}

##Client VPN Configuration for an existing VNet Gateway
Get-AzureRmVpnClientPackage -ResourceGroupName $rgName1 -VirtualNetworkGatewayName $GWName1 -ProcessorArchitecture Amd64 <#For 64-bit clients only. Pass X86 value for 32-bit clients#>
Get-AzureRmVpnClientPackage -ResourceGroupName $rgName2 -VirtualNetworkGatewayName $GWName2 -ProcessorArchitecture Amd64 <#For 64-bit clients only. Pass X86 value for 32-bit clients#>
Get-AzureRmVpnClientPackage -ResourceGroupName $rgName3 -VirtualNetworkGatewayName $GWName3 -ProcessorArchitecture Amd64 <#For 64-bit clients only. Pass X86 value for 32-bit clients#>

#Clearing variables other than the recorded (pre-existing) environment variables
$NewVariables = Get-Variable | Select-Object -ExpandProperty Name | Where-Object {$ExistingVariables -notcontains $_ -and $_ -ne "ExistingVariables"}
if ($NewVariables)
    {
    Write-Host "Removing the following variables:`n`n$NewVariables"
    Remove-Variable $NewVariables
    }
else
    {
    Write-Host "No new variables to remove!"
    }
